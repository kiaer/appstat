\documentclass{article}
\usepackage{fullpage}
\usepackage[utf8]{inputenc}
\usepackage{listings}
\usepackage{caption}
\usepackage[table]{xcolor}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{parskip}
\usepackage{url}
\usepackage{float}
\usepackage{enumitem} 
\usepackage{amstext}
\usepackage{fancybox}
\usepackage{amsmath}
\usepackage{stmaryrd}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage[bottom]{footmisc}
\usepackage{hyperref}
\linespread{1.3}
\usepackage{datenumber}


\pagestyle{fancy}
\fancyhf{}
\setlength{\parindent}{0pt}

\setlength{\headheight}{15pt}
\setlength{\headsep}{25pt}
\lhead{Applied Statistics and Statistical Software (02441) - Case 2}
\rhead{\today}
\cfoot{Page \thepage{} of \pageref{LastPage}}
\newcommand{\code}[1]{\texttt{#1}}

\title{
\HRule \\
\textsc{\doctitle} \\
	 \small{\textsl{\docsubtitle}}
\HRule\\
}
\author{\docauthor\\\small{\docplace}}
\date{\docdate}
\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
\begin{document}
\begin{titlepage}
\begin{center}
\textsc{\LARGE 02441 -  Applied Statistics and Statistical Software \\Winter 2018}\\[1.5cm]
\textsc{\large Technical University of Denmark}\\[0.5cm]
\HRule \\[0.4cm]
{ \huge \bfseries Case 2}\\[0.1cm]
\HRule \\[1.5cm]
\end{center}
\begin{flushleft} \large
\emph{Author:}\\
Christian Mathias Rohde \textsc{Ki√¶r}: s123812\\
Per Anton \textsc{Almgren}: s170464\\
Kristian \textsc{Maar}: s172956
\end{flushleft}
\vfill
\begin{flushleft} \large

\end{flushleft}
\vfill
\begin{center}
{\large \today}
\end{center}
\end{titlepage}
\newpage
\section*{Summary}
Campylobacter bacteria is currently the leading cause of enteric infections in Denmark and the primary source of exposure and risk of infection is through handling or ingesting contaminated poultry products. Sampling from broiler flocks before slaughtering reveals a seasonal pattern in the proportional occurrence of Campylobacter. This report aims to investigate climate data from the Danish Meteorological Institute to determine possible correlations between climate variables e.g. temperature and the proportion of infected flocks. After data transformation we apply a linear reggression model and find strong correlation between average- and maximum temperature and Campylobacter positive flocks. Further analysis of possible trends not explained by climate data as well as regional variation is performed but yields no determinate results.

\newpage
\tableofcontents
\newpage
<<echo=FALSE, results='hide'>>=
climate = read.table("climate.txt", header=T, sep = "\t")
weekly = read.csv("weekly_pos.csv", header=T)
camp = read.table("case2regions4.txt", header=T, sep = "\t")
library(MASS)
library(car)
library(lattice)
library(xtable)
@

<<echo=FALSE, results='hide'>>=
stepP <- function(object, level=0.05, verbose=FALSE){
  if (!("lm" %in% class(object))){
    error("First argument should be an lm object")
  }
  d1 <- drop1(object, test="F")[-1,]
  maxP <- max(d1[["Pr(>F)"]])
  lmTmp <- object
  maxVar <- row.names(d1)[d1[["Pr(>F)"]]==maxP]
  history <-NULL # For storing the history of models
  tmpFormula <- paste(as.character(formula(lmTmp))[c(2,1,3)], collapse=" ")
  
  while(maxP > level & nrow(d1)>=1){
    maxVar <- row.names(d1)[d1[["Pr(>F)"]]==maxP]
    history <- rbind(history,data.frame(formula= tmpFormula, maxP=maxP, maxVar = maxVar) )
    lmTmp <- update(lmTmp, paste(".~.-",maxVar))
    d1 <- drop1(lmTmp, test="F")[-1,]
    maxP <- max(d1[["Pr(>F)"]])
    tmpFormula <- paste(as.character(formula(lmTmp))[c(2,1,3)], collapse=" ")
    if (verbose)
      print(tmpFormula) # Print the formula after each reduction
  }
  # Also adding the final model to document the p-value
  maxVar <- row.names(d1)[d1[["Pr(>F)"]]==maxP]
  tmpFormula <- paste(as.character(formula(lmTmp))[c(2,1,3)], collapse=" ")
  history <- rbind(history,data.frame(formula= tmpFormula, maxP=maxP, maxVar = maxVar) )
  return(list(object=lmTmp, history=history))  
}
@

<<echo=FALSE, results='hide'>>=
lec.fun<-function(data, reference, others=names(data)[names(data)!=reference], ref.values=seq(min(data[[reference]]),max(data[[reference]]),length=30)){
  pdata<-data.frame(reference=ref.values)
  names(pdata)<-reference
  for(i in others){
    lmtmp<-lm(as.formula(paste(i,"~",reference)),data)
    pdata[[i]]<-predict(lmtmp,newdata=pdata[reference])
  }
  return(pdata)
}
pred.frame <- function(reference, data, others=names(data)[ !(names(data)%in%names(reference)) ]){
  if (class(reference) == "list"){  ## Need to run expand.grid( <list>)
    pdata <- expand.grid(reference)
  } else {
    pdata <- reference
  }
  ref.model <- names(reference)
  if(length(names(reference))>1)
    ref.model <- paste(ref.model, sep="+")
  for(i in others){
    lmtmp<-lm(as.formula(paste(i,"~",ref.model)),data)
    pdata[[i]]<-predict(lmtmp,newdata=pdata)
  }
  return(pdata)
}

@
<<Introduction, child='introduction.Rnw'>>=
@
<<CaseDescription, child='case.Rnw'>>=
@
<<StatisticalAnal, child='analysis.Rnw'>>=
@
<<Results, child='results.Rnw'>>=
@
<<Discussion, child='discussion.Rnw'>>=
@
<<Conclusion, child='conclusion.Rnw'>>=
@
\newpage
\section{Appendix}
\subsection{Diagnostic plots}
\label{sec:diag}
<<diagplots, fig.align='center', fig.pos="H", fig.cap="Diagnosits plot for LM with added quadratic terms">>=
par(mfrow=c(2,2))
plot(b1)
@
\subsection{Plots}
\label{sec:residual}
<<finalres, fig.align='center', fig.pos="H", fig.cap="Final model residual plots">>=
residualPlots(a3)
@


\subsection{Main script}
\label{sec:main}
<<eval=FALSE>>=
### Main script
climate = read.table("climate.txt", header=T, sep = "\t")
weekly = read.csv("weekly_pos.csv", header=T)
camp = read.table("case2regions4.txt", header=T, sep = "\t")
library(MASS)
library(car)
library(lattice)
#camp <- data.frame(weekly, climate)
sum(camp$total)
summary(camp)
#plot(camp, panel=panel.smooth)
boxplot(pos/total ~ week, camp)

plot(camp$week, camp$aveTemp)
plot(camp$week, camp$pos/camp$total)

lm1 <- lm((pos / total) ~ (aveTemp + maxTemp + relHum + sunHours + precip )^2, data=camp)
par(mfrow=c(2,2))
plot(lm1)

residualPlots(lm1)
summary(lm1)
boxcox(lm1, lambda = seq(0, 1, length.out = 20), data=camp)

lm2 <- stepP(lm1)$object
summary(lm2)
anova(lm2)
drop1(lm2, test="F")
library(xtable)
xtable(residualPlots(lm1))

stepP <- function(object, level=0.05, verbose=FALSE){
  if (!("lm" %in% class(object))){
    error("First argument should be an lm object")
  }
  d1 <- drop1(object, test="F")[-1,]
  maxP <- max(d1[["Pr(>F)"]])
  lmTmp <- object
  maxVar <- row.names(d1)[d1[["Pr(>F)"]]==maxP]
  history <-NULL # For storing the history of models
  tmpFormula <- paste(as.character(formula(lmTmp))[c(2,1,3)], collapse=" ")
  
  while(maxP > level & nrow(d1)>=1){
    maxVar <- row.names(d1)[d1[["Pr(>F)"]]==maxP]
    history <- rbind(history,data.frame(formula= tmpFormula, maxP=maxP, maxVar = maxVar) )
    lmTmp <- update(lmTmp, paste(".~.-",maxVar))
    d1 <- drop1(lmTmp, test="F")[-1,]
    maxP <- max(d1[["Pr(>F)"]])
    tmpFormula <- paste(as.character(formula(lmTmp))[c(2,1,3)], collapse=" ")
    if (verbose)
      print(tmpFormula) # Print the formula after each reduction
  }
  # Also adding the final model to document the p-value
  maxVar <- row.names(d1)[d1[["Pr(>F)"]]==maxP]
  tmpFormula <- paste(as.character(formula(lmTmp))[c(2,1,3)], collapse=" ")
  history <- rbind(history,data.frame(formula= tmpFormula, maxP=maxP, maxVar = maxVar) )
  return(list(object=lmTmp, history=history))  
}

mod <- stepP(lm2)
lm3 <- mod$object

# par(mfrow=c(2,2))
# plot(lm12)
# residualPlots(lm12)

a1 <- lm((pos / total)^0.7 ~ (maxTemp + relHum  + precip + sunHours + I(aveTemp^2) + 
                                I(sunHours^2) + I(precip^2))^2, data=camp, 
                                subset= c(-496))
par(mfrow=c(2,2))
plot (a1)
summary(a1)
boxcox(a1)
residualPlots(a1)

a3 <- stepP(a1)$object
drop1(a3, test="F")
anova(a3)
summary(a3)
residualPlots(a3)
plot(a3)

b1 <- lm((pos / total)^0.7 ~ (aveTemp + maxTemp + relHum + precip  + sunHours + 
                                I(aveTemp^2) + I(sunHours^2) + I(precip^2))^2,
                                        data=camp, subset = -496)
par(mfrow=c(2,2))
plot(b1)
b2 <- stepP(b1)$object
summary(b2)
anova(a3)

anova(a3,b2)
sum(camp$total)

lec.fun<-function(data, reference, others=names(data)[names(data)!=reference], 
                  ref.values=seq(min(data[[reference]]),max(data[[reference]]),length=30)){
  pdata<-data.frame(reference=ref.values)
  names(pdata)<-reference
  for(i in others){
    lmtmp<-lm(as.formula(paste(i,"~",reference)),data)
    pdata[[i]]<-predict(lmtmp,newdata=pdata[reference])
  }
  return(pdata)
}

pred.frame <- function(reference, data, others=names(data)
                       [ !(names(data)%in%names(reference)) ]){
  if (class(reference) == "list"){  ## Need to run expand.grid( <list>)
    pdata <- expand.grid(reference)
  } else {
    pdata <- reference
  }
  ref.model <- names(reference)
  if(length(names(reference))>1)
    ref.model <- paste(ref.model, sep="+")
  for(i in others){
    lmtmp<-lm(as.formula(paste(i,"~",ref.model)),data)
    pdata[[i]]<-predict(lmtmp,newdata=pdata)
  }
  return(pdata)
}

par(mfrow=c(1,1))
plot((pos / total) ~ maxTemp,data=camp, 
     ylab = "Proportion of infections", xlab = "Average temperature")

campy <- lec.fun(camp,reference="maxTemp",
                 others=c("aveTemp", "relHum", "precip", "sunHours"), ref.values=0:30)
campyb <- lec.fun(camp,reference="sunHours",
                  others=c("maxTemp", "relHum", "precip", "aveTemp"), ref.values=0:90)

#pred.campy<-predict(b2, int="p",newdata=campy)
pred.campya<- predict(a3, int="p",newdata=campy)
#matlines(campy$aveTemp,pred.campy^(10/7),lty=c(1,2,2),col=3,lwd=2)
matlines(campy$maxTemp,pred.campya^(10/7),lty=c(1,2,2),col=2,lwd=2)

plot((pos / total) ~ sunHours,data=camp, ylab = 
       "Proportion of infections", xlab = "Weekly hours of sun")
pred.campyb<- predict(a3, int="p",newdata=campyb)
#matlines(campy$aveTemp,pred.campy^(10/7),lty=c(1,2,2),col=3,lwd=2)
matlines(campyb$sunHours,pred.campyb^(10/7),lty=c(1,2,2),col=2,lwd=2)

summary(a3)
p.aveTemp <- seq(-5, 25)
p.sunHours <- seq(0,80,by = 1)
par(mfrow=c(1,1))

## Creating prediction data.frame and then predicting
pred.data <-pred.frame(reference = list(aveTemp=p.aveTemp, 
                                        sunHours=p.sunHours), data = camp, 
                       others = c("maxTemp", "relHum", "precip"))
pred <- predict(a3, newdata = pred.data, interval = "predict")

## Wrapping the predictions as a matrix 
z <- matrix(pred[,"fit"], nrow=length(p.aveTemp))
z2 <- z
z2[z2 >= 1.1] <- NA

## First an image:
image(p.aveTemp, p.sunHours, z2, xlab = "Average temp", ylab = "Sun hours")
## Adding a contour:
contour(p.aveTemp, p.sunHours, z2, add=TRUE, labcex = 1.5)
points(sunHours ~ aveTemp, data= camp, cex=0.5) # To show the observations
z2 <- z
z2[z2 > 1] <- NA
## First an image:
image(p.sunHours, p.aveTemp, z2, xlab = "sunHours", ylab = "Precipitation")
## Adding a contour:
contour(p.sunHours, p.aveTemp, z2, add=TRUE, labcex = 1.5)
points(aveTemp ~ sunHours, data= camp, cex=0.5) # 
@
\subsection{Regional analysis}
<<eval=FALSE>>=

@
\subsection{Data Cleaner}
\label{sec:datamerge}
<<eval=FALSE, >>=
### Data generator
pre2002<-read.table("campy_pre2002.txt", header = TRUE,sep = "\t")

data_0205<-read.csv("campy_2002-2005.csv")

post2005<-read.csv("campy_2005-.csv")

##step1
pre2002_ny<-subset.data.frame(pre2002,!pre2002$SEKTION=="res")
##step2
pre2002_ny2<-subset.data.frame(pre2002,pre2002$AKTVNR=="5133")
##step3
pre2002_ny3<-subset.data.frame(pre2002_ny2,pre2002_ny2$CHR_NR>="10000")

data_0205_ny3<-subset.data.frame(data_0205,data_0205$Chrnr>="10000")

post2005_ny3<-subset.data.frame(post2005,post2005$Chrnr>="10000")

##step4
pre2002_ny4<-pre2002_ny3
pre2002_ny4$PRV_DATO<-as.Date(pre2002_ny4$PRV_DATO,format="%d%b%Y")

data_0205_ny4<-data_0205_ny3
data_0205_ny4$Prvdato<-as.Date(data_0205_ny4$Prvdato,format="%m/%d/%y")
#der er data fra f??r 2002 og efter 2005 med i datasettet

post2005_ny4<-post2005_ny3
post2005_ny4$Provedato<-as.Date(post2005_ny4$Provedato,format="%m/%d/%y")

##step5
pre2002_ny5<-pre2002_ny4[c("CHR_NR","EPINR","JNR","MATR","BAKTFUND","PRV_DATO",
                           "region")]
names(pre2002_ny5)<- c("chrnr","epinr","jnr","matr","resultat","prvdato","region")

data_0205_ny5<-data_0205_ny4[c("Chrnr","Epi.nr","Jnr","Materialeart","Resultat",
                               "Prvdato","region")]
names(data_0205_ny5)<- c("chrnr","epinr","jnr","matr","resultat","prvdato","region")

post2005_ny5<-post2005_ny4[c("Chrnr","Epinr","Jnr","Materialeart","Tolkning",
                             "Provedato","region")]
names(post2005_ny5)<- c("chrnr","epinr","jnr","matr","resultat","prvdato","region")

##step6
campy<-rbind(pre2002_ny5,data_0205_ny5,post2005_ny5)

##step7
campy7<-campy
campy7<-campy7[!is.na(campy$epinr),]

##step8
campy8<-campy7

levels(campy8$resultat) <- list("NEG"=levels(campy8$resultat)[c(1,10,12)], 
                                "POS"=levels(campy8$resultat)
                                [c(2,3,4,5,6,7,8,9,11,13)])

##step9
campy9<-campy8
campy9<-subset.data.frame(campy9,campy9$matr%in%c("Kloaksvaber","Svaberpr√∏ve",
                                                  "766","772"))


#step10 if time permits....

#step11
campy11<-campy9
#campy11$ugenr<-strftime(as.POSIXct(campy9$prvdato),format = "%V")
campy11$ugenr<-as.numeric(ceiling(difftime(campy11$prvdato,
                                           strptime("19971229",format="%Y%m%d"),
                                           units="weeks")))

#step12
campy12<-subset.data.frame(campy11,campy11$prvdato>="1997-12-29")
#campy12 <- campy11

#step13
jnr1<-campy12$jnr[duplicated(campy12$jnr)]
jnr2<-unique(jnr1)
campy13<-subset.data.frame(campy12,!(campy12$jnr %in% jnr2))


#?????
#step14
campy14<-campy13
#step15

#campy15<-subset.data.frame(campy14,campy14$chrnr)

campy15<-campy14[campy14$chrnr %in% names(which(table(campy14$chrnr) >= 10)), ]

#step16
tot = list()
pos = list()

for (i in 1:max(campy15$ugenr)){
  tot[i]  <- length(which(campy15$ugenr == i))
  pos[i] <- length(which(campy15$ugenr == i & campy15$resultat == "POS"))
}
sum_camp <- data.frame(unlist(tot, recursive = TRUE, use.names = TRUE),
                       unlist(pos, recursive = TRUE, use.names = TRUE))
colnames(sum_camp) <- c("Total", "Positive")

sum(sum_camp$Total)

write.csv(campy15, file="final_data.csv")
write.csv(sum_camp, file="weekly_pos.csv")
@

\end{document}
